# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Linfiniti Consulting CC
# This file is distributed under the same license as the The Free Quantum GIS Training Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: The Free Quantum GIS Training Manual 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-23 15:36+1100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../postgres/adding_data.rst:2
# 28cf64488df84d9fbd18ebb78feb0c49
msgid "|LS| Adding Data to the Model"
msgstr ""

#: ../../postgres/adding_data.rst:4
# b0591889ea724b90b8634faa05d6a8c2
msgid "The models we've created will now need to be populated with the data they're intended to contain."
msgstr ""

#: ../../postgres/adding_data.rst:7
# d2e85febdfa243418e8629446a6b9f91
msgid "**The goal for this lesson:** To learn how to insert new data into the database models."
msgstr ""

#: ../../postgres/adding_data.rst:11
# a1054ba784ca478a91b0a4e3b56c65ef
msgid "Insert statement"
msgstr ""

#: ../../postgres/adding_data.rst:13
# 28662643f9ac45bbabe1a20dc1decc9e
msgid "How do you add data to a table? The sql :kbd:`INSERT` statement provides the functionality for this:"
msgstr ""

#: ../../postgres/adding_data.rst:20
# 002a9f777a164030be7fed6411f64854
msgid "A couple of things to note:"
msgstr ""

#: ../../postgres/adding_data.rst:22
# 840b31b5e5164d168945a8dcac7c1b3e
msgid "after the table name (:kbd:`streets`), you list the column names that you will be populating (in this case only the :kbd:`name` column)."
msgstr ""

#: ../../postgres/adding_data.rst:24
# 83973004cea141f5bd93b9fdabe80e9b
msgid "after the :kbd:`values` keyword, place the list of field values."
msgstr ""

#: ../../postgres/adding_data.rst:25
# 4293c7be8bfb421ba7d3ea6eaf8e5b48
msgid "strings should be quoted using single quotes."
msgstr ""

#: ../../postgres/adding_data.rst:26
# a6de5dce8d984144a6425ae56f3804a8
msgid "you will note that I did not insert a value for the :kbd:`id` column - that is because it is a sequence and will be autogenerated."
msgstr ""

#: ../../postgres/adding_data.rst:28
# 0246d35fd2ba4b82bb550af37294b102
msgid "if you do manually set the :kbd:`id`, you may cause serious problems with the integrity of your database."
msgstr ""

#: ../../postgres/adding_data.rst:31
# b0aa8dee91994cd8b8ec770a293d79e8
msgid "You should see :kbd:`INSERT 0 1` if it is successful."
msgstr ""

#: ../../postgres/adding_data.rst:33
# d07a066767a046b492a01cd8ad2bc2a1
msgid "You can see the result of your insert action by selecting all the data in the table:"
msgstr ""

#: ../../postgres/adding_data.rst:40
# f6ddca023b54455ba721bcce1b467b0f
msgid "result:"
msgstr ""

#: ../../postgres/adding_data.rst:50
# db05bfe0d640470db185b78998e245b6
msgid "Now you try:"
msgstr ""

#: ../../postgres/adding_data.rst:52
# bfc11825deb040e589f420a353514cae
msgid "Use the :kbd:`INSERT` command to add a new street to the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:54
# 45eefa7cea5945b589c498755a920448
msgid "Write the sql you used here:"
msgstr ""

#: ../../postgres/adding_data.rst:70
# 6ef180e933594785ae717f3233f5f6b2
msgid "Sequencing data addition according to constraints"
msgstr ""

#: ../../postgres/adding_data.rst:72
# 811e367bd5e448cdbfe4aaa0e27f56f4
msgid "Try to add a person to the people table with the following details:"
msgstr ""

#: ../../postgres/adding_data.rst:81
# 0a2a55451bd64310a92114376d34515c
msgid "Remember, we defined phone numbers as strings."
msgstr ""

#: ../../postgres/adding_data.rst:83
# 565436dbf78a47f18376d49f6dd082c9
msgid "What problems did you encounter?"
msgstr ""

#: ../../postgres/adding_data.rst:104
# ad89aa17ad2a487a8e9b33b6cbfd40a3
msgid "You should have an error report if you try to do this without first creating a record for Main Street in the :kbd:`streets` table."
msgstr ""

#: ../../postgres/adding_data.rst:107
# 55d1105cb7d340bea25ba7af52e3957e
msgid "What error did you get?"
msgstr ""

#: ../../postgres/adding_data.rst:112
# f69f51762c6d4a43a131838be2899c29
msgid "You should have noticed that:"
msgstr ""

#: ../../postgres/adding_data.rst:110
# a90019fd68e14c60876eba69b216bf8d
msgid "You can't add the street using its name"
msgstr ""

#: ../../postgres/adding_data.rst:111
# cda024ab4e1643f8b376bd17d4ee28ae
msgid "You can't add a street using a street :kbd:`id` before first creating the street record on the streets table"
msgstr ""

#: ../../postgres/adding_data.rst:114
# 5d413c6307db46098d44b73b292402e4
msgid "Remember that our two tables are linked via a Primary/Foreign Key pair. This means that no valid person can be created without there also being a valid corresponding street record."
msgstr ""

#: ../../postgres/adding_data.rst:118
# 33705143153246379684b44b56298d99
msgid "Here is how we made our friend:"
msgstr ""

#: ../../postgres/adding_data.rst:126
# 9d8a7619c62d42e2a65152256710404e
msgid "If you look at the streets table again (using a select statement as before), you'll see that the :kbd:`id` for the :kbd:`Main Street` entry is :kbd:`2`. That's why we could merely enter the number :kbd:`2` above. Even though we're not seeing :kbd:`Main Street` written out fully in the entry above, the database will be able to associate that with the :kbd:`street_id` value of :kbd:`2`."
msgstr ""

#: ../../postgres/adding_data.rst:134
# 4981a3cb0ddc4632bd87b29ef624b130
msgid "Select data"
msgstr ""

#: ../../postgres/adding_data.rst:136
# 9cb539e5476145e98a2bcf2d5afe5769
msgid "We have already shown you the syntax for selecting records. Lets look at a few more examples:"
msgstr ""

#: ../../postgres/adding_data.rst:151
# db280f87622e47ce91af196656b0b068
msgid "In later sessions we will go into more detail on how to select and filter data."
msgstr ""

#: ../../postgres/adding_data.rst:154
# 87edf0982d164a4287806a6fe0a7a2c9
msgid "Update data"
msgstr ""

#: ../../postgres/adding_data.rst:156
# 98aeed0885e14de199ee294dbd67b7c5
msgid "What is you want to make a change to some existing data? For example a street name is changed:"
msgstr ""

#: ../../postgres/adding_data.rst:163
# 6ca0c871b96847da9e8b1fa693f344b0
msgid "Be very careful using such update statements - if more than one record matches your :kbd:`WHERE` clause, they will all be updated!"
msgstr ""

#: ../../postgres/adding_data.rst:166
# 75390f9ef5284354a6d607e0559bb3de
msgid "A better solution is to use the primary key of the table to reference the record to be changed:"
msgstr ""

#: ../../postgres/adding_data.rst:173
# dde4ee804d724b5b88f22f933a25a758
msgid "It should return :kbd:`UPDATE 1`."
msgstr ""

#: ../../postgres/adding_data.rst:175
# 9c60dc298f1b42b7b03cc572d2a1d194
msgid "the :kbd:`WHERE` statement criteria are case sensitive :kbd:`Main Street` <> :kbd:`Main street`"
msgstr ""

#: ../../postgres/adding_data.rst:179
# 9654d97446874f9ab426f04f550b824b
msgid "Delete Data"
msgstr ""

#: ../../postgres/adding_data.rst:181
# 00211e90f5d347829dca40261636175b
msgid "Some times you fall out of friendship with people. Sounds like a job for the :kbd:`DELETE` command!"
msgstr ""

#: ../../postgres/adding_data.rst:188
# 0cbfa160a0b04d32bddbac6a20914fde
msgid "Let's look at our people table now:"
msgstr ""

#: ../../postgres/adding_data.rst:197
# 541baee5389d40dbbb17bae5db1475a7
msgid "**Exercise:** Use the skills you learned earlier to add some new friends to your database:"
msgstr ""

#: ../../postgres/adding_data.rst:210
#: ../../postgres/data_model.rst:483
#: ../../postgres/db_intro.rst:425
#: ../../postgres/queries.rst:314
#: ../../postgres/rules.rst:58
#: ../../postgres/views.rst:80
# e25bd2ee21ff484ca6e0c4c1ca217160
# add60ba7110847e988d9165bfea52452
# b7d4b5b9cb6b42209a12f05e5c1690fe
# 7f3acddab5754dc6b0764f54200dadad
# 7063790a50c442d7bf10f276fd68082b
# 2c25f6784b8043c7a3c8d9fba5d5b8f2
msgid "|IC|"
msgstr ""

#: ../../postgres/adding_data.rst:212
# 9c1b29ac80c34bba8a430f2feca235a2
msgid "Now you know how to add new data to the existing models you created previously. Remember that if you want to add new kinds of data, you may want to modify and/or create new models to contain that data."
msgstr ""

#: ../../postgres/adding_data.rst:217
#: ../../postgres/data_model.rst:489
#: ../../postgres/db_intro.rst:431
#: ../../postgres/queries.rst:320
#: ../../postgres/rules.rst:64
#: ../../postgres/views.rst:85
# 3c27454e7fc0430eb1cf7c8df832f731
# fc45c460b9f74f158976d8ce786889d8
# 68b28c08161348628bdee3281403b99d
# 92914f03debb423599deff00a5563eb4
# d966557ca4e14af0836ad04b57c80f3c
# 259f7a0b392a4f4b9cd4969fe1f3bb0e
msgid "|WN|"
msgstr ""

#: ../../postgres/adding_data.rst:219
# 9519996fc9a7478f8f5e849fa8a99ef8
msgid "Now that you've added some data, you'll learn how to use queries to access this data in various ways."
msgstr ""

#: ../../postgres/data_model.rst:2
# dfc6519d29fe4196aaf04a097539292a
msgid "|LS| Implementing the Data Model"
msgstr ""

#: ../../postgres/data_model.rst:4
# 3c6881157add42faafd2ff15ac8fe3c2
msgid "Now that we've covered all the theory, let's create a new database. This database will be used for our exercises for the lessons that will follow afterwards."
msgstr ""

#: ../../postgres/data_model.rst:8
# c84b5a499ee9489bb5678912ae414db3
msgid "**The goal for this lesson:** To install the required software and use it to implement our example database."
msgstr ""

#: ../../postgres/data_model.rst:12
# 57d457854d544168b3dfd023e1532fbd
msgid "Install PostgreSQL"
msgstr ""

#: ../../postgres/data_model.rst:14
#: ../../postgres/data_model.rst:51
# c8e73fb0c4424b5bb1f08b11f96d0f9b
# 31fe3554d2ef43499be2bc15c5e8955f
msgid "Under Ubuntu:"
msgstr ""

#: ../../postgres/data_model.rst:20
# eef5ffa8fb8d479fa71a9e3b58a45489
msgid "You should get a message like this:"
msgstr ""

#: ../../postgres/data_model.rst:39
# d691ea31c3ab412bbeb16af3bfcc445b
msgid "Press :kbd:`Y` and :kbd:`Enter` and wait for the download and installation to finish."
msgstr ""

#: ../../postgres/data_model.rst:43
# 1722342a6d324998a143c9be0e5aa96f
msgid "Help"
msgstr ""

#: ../../postgres/data_model.rst:45
# 41322aa38c14498186fad105f93df7dd
msgid "PostgreSQL has very good `online <http://www.postgresql.org/docs/9.1/static/index.html>`_ documentation."
msgstr ""

#: ../../postgres/data_model.rst:49
# 678edc7c476d43fa985d62a78a1d7834
msgid "Create a database user"
msgstr ""

#: ../../postgres/data_model.rst:53
# 50abca0b35ad4297bf0a7d1fbabaa4db
msgid "After the installation is complete, run this command to become the postgres user and then create a new database user:"
msgstr ""

#: ../../postgres/data_model.rst:60
# 9780607a2db143b1b3a1dd65d118031e
msgid "Type in your normal log in password when prompted (you need to have sudo rights)."
msgstr ""

#: ../../postgres/data_model.rst:62
# aeab74fa6e1d487591c921a3fd154387
msgid "Now, at the postgres user's bash prompt, create the database user. Make sure the user name matches your unix login name: it will make your life much easier, as postgres will automatically authenticate you when you are logged in as that user."
msgstr ""

#: ../../postgres/data_model.rst:71
# ebae91ad5794408fa12ea83d3ba20bdb
msgid "Enter a password when prompted. I normally use a different password to my usual unix login."
msgstr ""

#: ../../postgres/data_model.rst:74
# 24c2de782659493d9e1354d6a58dd0b4
msgid "What do those options mean?"
msgstr ""

#: ../../postgres/data_model.rst:86
# 71900e9c3e7a481fa072b1dc9677e69f
msgid "Now you should should leave the postgres user's bash shell environment by typing:"
msgstr ""

#: ../../postgres/data_model.rst:94
# aaf40a2f86334dce84737b3661076458
msgid "Verify the new account"
msgstr ""

#: ../../postgres/data_model.rst:100
# 2296fd3ef0be4c6b8bdd1330d116ea09
msgid "Should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:113
#: ../../postgres/data_model.rst:144
# a3f09bfa10b74db8bfaa67a4cfab0370
# f97b4a4e8633496ea3a2664d6fa28d09
msgid "Type :kbd:`q` to exit."
msgstr ""

#: ../../postgres/data_model.rst:116
# e767dfb71c6442d98559e08551dd9566
msgid "Create a database"
msgstr ""

#: ../../postgres/data_model.rst:118
# fd85fd1d90a54758abeaf67201ed0cd1
msgid "The :kbd:`createdb` command is used to create a new database. It should be run from the bash shell prompt."
msgstr ""

#: ../../postgres/data_model.rst:125
# 2247448658e6490bb64dea54e71be56b
msgid "You can verify the existence of your new database by using this command:"
msgstr ""

#: ../../postgres/data_model.rst:131
# 7a576c476873432e8dc8abf0c39dd575
msgid "Which should return something like this:"
msgstr ""

#: ../../postgres/data_model.rst:147
# d7032d9e32494633a580b5b50f17ca63
msgid "Starting a database shell session"
msgstr ""

#: ../../postgres/data_model.rst:149
# 71c129e56cdf4a77b51c5fa8a5d294e8
msgid "You can connect to your database easily like this:"
msgstr ""

#: ../../postgres/data_model.rst:155
# f91c52141906488097148a05d9efe5ae
msgid "To exit out of the psql database shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:161
# 6770f120905241ee9f3befb367d57963
msgid "For help in using the shell, type:"
msgstr ""

#: ../../postgres/data_model.rst:167
# acc04c25bb1b4f27a4d543984e09f74d
msgid "For help in using sql commands, type:"
msgstr ""

#: ../../postgres/data_model.rst:173
# c6ff5ebac93741cab004a0559e1cfd3f
msgid "To get help on a specific command, type (for example):"
msgstr ""

#: ../../postgres/data_model.rst:179
# 85a87f5468154428abe48e36098fa666
msgid "See also the `Psql cheat sheet <../_static/postgres/psql_cheatsheet.pdf>`_ - available online `here <http://www.postgresonline.com/special_feature.php?sf_name=postgresql83_psql_cheatsheet&outputformat=html>`_."
msgstr ""

#: ../../postgres/data_model.rst:184
# 8ec2ab8b36ae4009b976b1b43d119fa1
msgid "Make Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:186
# e278975d70b84c31a546fbd4c284edea
msgid "Let's start making some tables! We will use our ER Diagram as a guide. First, let's create a streets table:"
msgstr ""

#: ../../postgres/data_model.rst:193
# 0722da07869049bba4a80f5e8eab7ece
msgid ":kbd:`serial` and :kbd:`varchar` are **data types**. :kbd:`serial` tells PostgreSQL to start an integer sequence (autonumber) to populate the :kbd:`id` automatically for every new record. :kbd:`varchar(50)` tells PostgreSQL to create a character field of 50 characters in length."
msgstr ""

#: ../../postgres/data_model.rst:198
# 73968bb505b742b1a5fa9508cdc26e59
msgid "You will notice that the command ends with a :kbd:`;` - all SQL commands should be terminated this way. When you press enter, psql will report something like this:"
msgstr ""

#: ../../postgres/data_model.rst:210
# f8629e62065f42068a62378bfaba22e3
msgid "That means your table was created successfully, with a primary key :kbd:`streets_pkey` using :kbd:`streets.id`."
msgstr ""

#: ../../postgres/data_model.rst:213
# 32fec780517642cca55e9588dfc9cda3
msgid "Note: If you hit return without entering a :kbd:`;`, then you will get a prompt like this: :kbd:`address-#`. This is because PG is expecting you to enter more. Enter :kbd:`;` to run your command."
msgstr ""

#: ../../postgres/data_model.rst:217
# 8b07056952284281a99622b619b71b14
msgid "To view your table schema, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:223
#: ../../postgres/data_model.rst:242
# 0605f92a8886401b938822dd88a180f6
# add7a4ca879a4df4a520693ee5633ec2
msgid "Which should show something like this:"
msgstr ""

#: ../../postgres/data_model.rst:236
# 16ee58881f2b4becbbc00b0bdcc25055
msgid "To view your table contents, you can do this:"
msgstr ""

#: ../../postgres/data_model.rst:250
# 348e3f922b1d4d93a085382e154adc24
msgid "As you can see, our table is empty!"
msgstr ""

#: ../../postgres/data_model.rst:252
# dfbe886cb8e645abb67eef4f7494ea7f
msgid "Use the approach shown above to make a table called people: Add fields such as phone number, home address, name, etc. (these aren't all valid names: change them to make them valid)."
msgstr ""

#: ../../postgres/data_model.rst:255
# b65ede236026457c9545e746aa729d80
msgid "Write the SQL you create here:"
msgstr ""

#: ../../postgres/data_model.rst:296
#: ../../postgres/queries.rst:289
# bb572f86039e4f45b816face2cfc7515
# 3d2d2b000d6d4cdbafe57227dc099f94
msgid "Solution:"
msgstr ""

#: ../../postgres/data_model.rst:306
# 131661cb1bd24556bcf2aefae5ef3697
msgid "The schema for the table (enter :kbd:`\\\\d people`) looks like this:"
msgstr ""

#: ../../postgres/data_model.rst:322
# 29d273bd93a34591ba43bd6d85332a7c
msgid "For illustration purposes, we have purposely omitted the fkey constraint."
msgstr ""

#: ../../postgres/data_model.rst:326
# acefb891b3d94a4b8135f274209837a0
msgid "Create Keys in SQL"
msgstr ""

#: ../../postgres/data_model.rst:328
# 4eda5fccf08e4cd181f83f91ec218ae7
msgid "The problem with our solution above is that the database doesn't know that people and streets have a logical relationship. To express this relationship, we have to define a foreign key that points to the primary key of the streets table."
msgstr ""

#: ../../postgres/data_model.rst:338
# 0cce829957ba47cbb42a681ef8caa6c2
msgid "There are two ways to do this:"
msgstr ""

#: ../../postgres/data_model.rst:337
# 9795b0430b3b47b7bb6ce7875e32492e
msgid "adding the key after the table has been created"
msgstr ""

#: ../../postgres/data_model.rst:338
# 67693b7a23e348afb3ff0196d4451ea0
msgid "defining the key at time of table creation"
msgstr ""

#: ../../postgres/data_model.rst:340
# 0afe62d48ac345cca7781722541603c6
msgid "Our table has already been created, so let's do it the first way:"
msgstr ""

#: ../../postgres/data_model.rst:348
# a55450bc379c4ab4b654d0b3db316c66
msgid "That tells the :kbd:`people` table that its :kbd:`street_id` fields must match a valid street :kbd:`id` from the :kbd:`streets` table."
msgstr ""

#: ../../postgres/data_model.rst:351
# 910908b5a8d34e53a9478928ee85f348
msgid "The more usual way to create a constraint is to do it when you create the table:"
msgstr ""

#: ../../postgres/data_model.rst:361
# 15f2c2dd580645c484163bb64c725e2e
msgid "After adding the constraint, our table schema looks like this now:"
msgstr ""

#: ../../postgres/data_model.rst:381
# 36cbad689288450aa6ba08b253805878
msgid "Create Indexes in SQL"
msgstr ""

#: ../../postgres/data_model.rst:383
# dcc4e3bf18434fcd8fc9405508e4673d
msgid "We want lightning fast searches on peoples names. To provide for this, we can create an index on the name column of our people table:"
msgstr ""

#: ../../postgres/data_model.rst:409
# bf659c8ccb0542028ef247f6d86b9069
msgid "Dropping Tables in SQL"
msgstr ""

#: ../../postgres/data_model.rst:411
# a3f7362aae2b43239db4ad3ab92014c5
msgid "If you want to get rid of a table you can use the :kbd:`drop` command:"
msgstr ""

#: ../../postgres/data_model.rst:418
# 6fbbc24eddf54777a06c7b6058106dd8
msgid "In our example, this would not work - why?"
msgstr ""

#: ../../postgres/data_model.rst:420
# a24cfd12c9ec4b99be38794ac96563ce
msgid "Some deep and inspired thoughts as to why..."
msgstr ""

#: ../../postgres/data_model.rst:436
# c989fbc8cc1d4e38b9f6a015036da127
msgid "Sometimes you just can't stand having a table any more. Maybe you are sick of all your friends. How can you get rid of them all in one easy step? Drop the table of course! Of course, right now too much hard work has gone into our table to get rid of it on a whim, but if you really hate your friends that much, nothing's stopping you from ridding yourself of them forever:"
msgstr ""

#: ../../postgres/data_model.rst:446
# 25b39afcbcee43c0a6559657397b694b
msgid "This time it works fine! Why? Are people less important than streets?"
msgstr ""

#: ../../postgres/data_model.rst:448
# 6686eb6d7c3b4fec8ad56559baf2dbeb
msgid "Some thoughts on why you could drop people:"
msgstr ""

#: ../../postgres/data_model.rst:464
# 1c549fdc3fd046a9907b78f21195748a
msgid "If you actually did enter that command and dropped the :kbd:`people` table, now would be a good time to rebuild it, as you will need it in the next exercises."
msgstr ""

#: ../../postgres/data_model.rst:469
# 6733dded352a44829e528fa6bdda7bc1
msgid "A word on PG Admin III"
msgstr ""

#: ../../postgres/data_model.rst:471
# 7fca5b5e9b49450aa045c4e5bd981fd9
msgid "We are showing you the SQL commands from the psql prompt because it's a very useful way to learn about databases. However, there are quicker and easier ways to do a lot of what we are showing you. Install PGAdminIII and you can create, drop, alter etc tables using 'point and click' operations in a GUI."
msgstr ""

#: ../../postgres/data_model.rst:476
# 822b09a817bd4459b46da61a0f7f3a6e
msgid "Under Ubuntu, you can install it like this:"
msgstr ""

#: ../../postgres/data_model.rst:485
# 8f3ff79da9a543e48f5a6b0f628031a7
msgid "You have now seen how to create a brand new database, starting completely from scratch."
msgstr ""

#: ../../postgres/data_model.rst:491
# 2fa2a2a7fbeb497f87b44615043fec3c
msgid "Next you'll learn how to use the DBMS to add new data."
msgstr ""

#: ../../postgres/db_intro.rst:2
# ccb0d539e12e4421958d8c474694f9dc
msgid "|LS| Introduction to Databases"
msgstr ""

#: ../../postgres/db_intro.rst:4
# b148f7573d944eb39e0ad34843313a00
msgid "Before using PostgreSQL, let's make sure of our ground by covering general database theory. You will not need to enter any of the example code; it's only there for illustration purposes."
msgstr ""

#: ../../postgres/db_intro.rst:8
# ccd2c8855d0d4710b3dabe4648b45930
msgid "**The goal for this lesson:** To understand fundamental database concepts."
msgstr ""

#: ../../postgres/db_intro.rst:11
# a518ef48b9734e1c82bc626febc2c9b3
msgid "What is a Database?"
msgstr ""

#: ../../postgres/db_intro.rst:13
# d188f96f61cc414cb46166b0e77377ea
msgid "A database consists of an organized collection of data for one or more uses, typically in digital form. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:18
# c7d650e1c84d47e892f2376e810c580e
msgid "A database management system (DBMS) consists of software that operates databases, providing storage, access, security, backup and other facilities. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:23
# f12c3ce1124641eeb04d9c539cd3eff5
msgid "Tables"
msgstr ""

#: ../../postgres/db_intro.rst:25
# 3468427a37c34ffeaf2843f83454166c
msgid "In relational databases and flat file databases, a table is a set of data elements (values) that is organized using a model of vertical columns (which are identified by their name) and horizontal rows. A table has a specified number of columns, but can have any number of rows. Each row is identified by the values appearing in a particular column subset which has been identified as a candidate key. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:40
# 26527653ff1b49508d6c8792fd5e6384
msgid "In SQL databases a table is also known as a **relation.**"
msgstr ""

#: ../../postgres/db_intro.rst:43
# 4ece94cea0334a2c91fe16291a9d92c2
msgid "Columns / Fields"
msgstr ""

#: ../../postgres/db_intro.rst:45
# bc5c8923a45f4b32a0a3b6dd7385b0f9
msgid "A column is a set of data values of a particular simple type, one for each row of the table. The columns provide the structure according to which the rows are composed. The term field is often used interchangeably with column, although many consider it more correct to use field (or field value) to refer specifically to the single item that exists at the intersection between one row and one column. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:52
# 8b120eb0238045c6a8e85a3cacb4bbbd
msgid "A column:"
msgstr ""

#: ../../postgres/db_intro.rst:61
# 6f443f74e2e44af0b38ea63e9d5d0885
msgid "A field:"
msgstr ""

#: ../../postgres/db_intro.rst:68
# f3e8f2ef3c7b4372b6add63a5b3db382
msgid "Records"
msgstr ""

#: ../../postgres/db_intro.rst:70
# 418b53cbb49e48a697f637a46b223e96
msgid "A record is the information stored in a table row. Each record will have a field for each of the columns in the table."
msgstr ""

#: ../../postgres/db_intro.rst:78
# d550bc5420bc42e6ba07c9b0237bd63f
msgid "Datatypes"
msgstr ""

#: ../../postgres/db_intro.rst:80
# 08e1df09453249a481086655983af352
msgid "Datatypes restrict the kind of information that can be stored in a column. *- Tim and Horst*"
msgstr ""

#: ../../postgres/db_intro.rst:83
# faac8d6bdeb44458a15c86cc37b0464a
msgid "There are many kinds of datatypes. Let's focus on the most common:"
msgstr ""

#: ../../postgres/db_intro.rst:85
# 7598f1a253c34c8c8301b04a5b9de7aa
msgid "String - to store free-form text data"
msgstr ""

#: ../../postgres/db_intro.rst:86
# 17ebedae3cdc4784a91a56fae8994f51
msgid "Integer - to store whole numbers"
msgstr ""

#: ../../postgres/db_intro.rst:87
# 4101f1c5ebd542c9a566eccde51f2d23
msgid "Real - to store decimal numbers"
msgstr ""

#: ../../postgres/db_intro.rst:88
# 75fbb05e486146538cf4b36c54a87ebf
msgid "Date - to store Horst's birthday so no one forgets"
msgstr ""

#: ../../postgres/db_intro.rst:89
# 792bb82466544d84bf237009758ae520
msgid "Boolean - to store simple true/false values"
msgstr ""

#: ../../postgres/db_intro.rst:91
# 23cae4da22e542c7a313d62fc3c1d64b
msgid "You can tell the database to allow you to also store nothing in a field. If there is nothing in a field, then the field content is referred to as a **'null' value**."
msgstr ""

#: ../../postgres/db_intro.rst:111
# 893e6d0dc0a047979962a158a18f97e7
msgid "There are many more datatypes you can use - `check the PostgreSQL manual! <http://www.postgresql.org/docs/current/static/datatype.html>`_"
msgstr ""

#: ../../postgres/db_intro.rst:115
# a2593e9ae9d048ac8b1788188fd1fe45
msgid "Modelling an Address Database"
msgstr ""

#: ../../postgres/db_intro.rst:117
# b930cc75a7e44737a85142fed303e419
msgid "Let's use a simple case study to see how a database is constructed. We want to create an address database. What kind of information should we store?"
msgstr ""

#: ../../postgres/db_intro.rst:120
# 561323ef2fb3485383a9d5da7734a28d
msgid "Write some address properties in the space provided:"
msgstr ""

#: ../../postgres/db_intro.rst:155
# d49a795fc7d0437d8448935e1486b815
msgid "The properties that describe an address are the columns. The type of information stored in each column is its datatype. In the next section we will analyse our conceptual address table to see how we can make it better!"
msgstr ""

#: ../../postgres/db_intro.rst:160
# 069e620ba3ea45629bf79a64eb29850d
msgid "Database Theory"
msgstr ""

#: ../../postgres/db_intro.rst:162
# b4180fddf9694baaa02a16296a0dbc38
msgid "The process of creating a database involves creating a model of the real world; taking real world concepts and representing them in the database as entities."
msgstr ""

#: ../../postgres/db_intro.rst:166
# 807f08faeac440689f1a726642ef1608
msgid "Normalisation"
msgstr ""

#: ../../postgres/db_intro.rst:168
# 8d54aa12193a494aab24f0c3d79d4df0
msgid "One of the main ideas in a database is to avoid data duplication / redundancy. The process of removing redundancy from a database is called Normalisation."
msgstr ""

#: ../../postgres/db_intro.rst:171
# 3be1966d495d4968bec4561357a9fb38
msgid "Normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristics - insertion, update, and deletion anomalies - that could lead to a loss of data integrity. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:176
# 61b80b2f59404624954460863fbf93b2
msgid "There are different kinds of normalisation 'forms'."
msgstr ""

#: ../../postgres/db_intro.rst:178
# ff9b3ff285614967a3de969ed5ddf71d
msgid "Let's take a look at a simple example:"
msgstr ""

#: ../../postgres/db_intro.rst:203
# 01eb9656646842a28d9516b26d078ecb
msgid "Imagine you have many friends with the same street name or city. Every time this data is duplicated, it consumes space. Worse still, if a city name changes,  you have to do a lot of work to update your database."
msgstr ""

#: ../../postgres/db_intro.rst:207
# 8c74e57eaf444e338cd53adbf842bc56
msgid "Try to redesign our people table to reduce duplication:"
msgstr ""

#: ../../postgres/db_intro.rst:237
# dbff7c8c18ac4822a633cbb77c68ed18
msgid "You can read more about database normalisation `here <http://en.wikipedia.org/wiki/Database_normalization>`_"
msgstr ""

#: ../../postgres/db_intro.rst:241
# 150ff3e1f494457485c6c6e5faa4cbaa
msgid "Indexes"
msgstr ""

#: ../../postgres/db_intro.rst:243
# 269fa32e16aa4039acbd13241f07a663
msgid "A database index is a data structure that improves the speed of data retrieval operations on a database table. *- Wikipedia*"
msgstr ""

#: ../../postgres/db_intro.rst:246
# fbf4994381734f1c90e4ab47329f12b9
msgid "Imagine you are reading a textbook and looking for the explanation of a concept - and the textbook has no index! You will have to start reading at one cover and work your way through the entire book until you find the information you need. The index at the back of a book helps you to jump quickly to the page with the relevant information."
msgstr ""

#: ../../postgres/db_intro.rst:256
# aee10899047745c9abdc092a1037f799
msgid "Now searches on name will be faster:"
msgstr ""

#: ../../postgres/db_intro.rst:274
# 39ff5343da0a40308be6256b152eb827
msgid "Sequences"
msgstr ""

#: ../../postgres/db_intro.rst:276
# 49464f44844846e69c4a5cd10b565729
msgid "A sequence is a unique number generator. It is normally used to create a unique identifier for a column in a table."
msgstr ""

#: ../../postgres/db_intro.rst:279
# 9bbe17bd61f34f1d8f8bbe6934d927d4
msgid "In this example, id is a sequence - the number is incremented each time a record is added to the table:"
msgstr ""

#: ../../postgres/db_intro.rst:290
# 16ae6628883a4d3db92a1c257bcb020f
msgid "Entity Relationship Diagramming"
msgstr ""

#: ../../postgres/db_intro.rst:292
# f350efa1671049cc862e54fb2e503b7f
msgid "In a normalised database, you typically have many relations (tables). The entity-relationship diagram (ER Diagram) is used to design the logical dependencies between the relations. Remember our un-normalised people table?"
msgstr ""

#: ../../postgres/db_intro.rst:305
# bdcb67e944c3442f8e5d752ebc5008f9
msgid "With a little work we can split it into two tables, removing the need to repeat the street name for individuals who live in the same street:"
msgstr ""

#: ../../postgres/db_intro.rst:316
# fecafb3fa8d949ef80b90d90d2b808e6
msgid "and"
msgstr ""

#: ../../postgres/db_intro.rst:326
# ff873ddb0d8743c19fd4b344d2684d88
msgid "We can then link the two tables using the 'keys' :kbd:`streets.id` and :kbd:`people.streets_id`."
msgstr ""

#: ../../postgres/db_intro.rst:329
# a3c57f2be7894a7f874c17418c7af3dd
msgid "If we draw an ER Diagram for these two tables it would look something like this:"
msgstr ""

#: ../../postgres/db_intro.rst:335
# e63d9758317f4817a44faa298da2f26a
msgid "The ER Diagram helps us to express 'one to many' relationships. In this case the arrow symbol show that one street can have many people living on it."
msgstr ""

#: ../../postgres/db_intro.rst:338
# 270d005973e3477fa2ce5fc4d23c0d53
msgid "Our people model still has some normalisation issues - try to see if you can normalise it further and show your thoughts by means of an ER Diagram."
msgstr ""

#: ../../postgres/db_intro.rst:370
# 8482275ddf8e4a338182db719b5fc174
msgid "Constraints, Primary Keys and Foreign Keys"
msgstr ""

#: ../../postgres/db_intro.rst:372
# 26b1bc0290934e64904d6ab649b079ab
msgid "A database constraint is used to ensure that data in a relation matches the modeller's view of how that data should be stored. For example a constraint on your postal code could ensure that the number falls between :kbd:`1000` and :kbd:`9999`."
msgstr ""

#: ../../postgres/db_intro.rst:377
# 3c047fe65e544a09a2d5b9987df31226
msgid "A Primary key is one or more field values that make a record unique. Usually the primary key is called id and is a sequence."
msgstr ""

#: ../../postgres/db_intro.rst:380
# 3080760cf4b443a1ba53a91707a9057f
msgid "A Foreign key is used to refer to a unique record on another table (using that other table's primary key)."
msgstr ""

#: ../../postgres/db_intro.rst:383
# 34c9d05f95bd436c8335346f3205fe53
msgid "In ER Diagramming, the linkage between tables is normally based on Foreign keys linking to Primary keys."
msgstr ""

#: ../../postgres/db_intro.rst:386
# a9ea2f4616d04aa1a901444f113e4d30
msgid "If we look at our people example, the table definition shows that the street column is a foreign key that references the primary key on the streets table:"
msgstr ""

#: ../../postgres/db_intro.rst:406
# 92a91329557744c78cfb5236f4db5dc6
msgid "Transactions"
msgstr ""

#: ../../postgres/db_intro.rst:408
# e594ece0d1e642d2b240e740d8d13698
msgid "When adding, changing, or deleting data in a database, it is always important that the database is left in a good state if something goes wrong. Most databases provide a feature called transaction support. Transactions allow you to create a rollback position that you can return to if your modifications to the database did not run as planned."
msgstr ""

#: ../../postgres/db_intro.rst:414
# 0edf8633e53a46f28ea0580fc764b9ee
msgid "Take a scenario where you have an accounting system. You need to transfer funds from one account and add them to another. The sequence of steps would go like this:"
msgstr ""

#: ../../postgres/db_intro.rst:418
# b5e34f6ac23a4e4ea03772459c8fa22a
msgid "remove R20 from Joe"
msgstr ""

#: ../../postgres/db_intro.rst:419
# a83203d4b94642e687ec6bb99ce4bb3f
msgid "add R20 to Anne"
msgstr ""

#: ../../postgres/db_intro.rst:421
# 75f7acf41a5e4ecc8745f49562abe9ac
msgid "If something goes wrong during the process (e.g. power failure), the transaction will be rolled back."
msgstr ""

#: ../../postgres/db_intro.rst:427
# 29df3ad19fab4766a4dd544a5ecefe73
msgid "Databases allow you to manage data in a structured way using simple code structures."
msgstr ""

#: ../../postgres/db_intro.rst:433
# e28c22119b8248caa93f8f6eb02bdc39
msgid "Now that we've looked at how databases work in theory, let's create a new database to implement the theory we've covered."
msgstr ""

#: ../../postgres/index.rst:3
# f4eaaa85d2e14d1e89c787754dda9589
msgid "|MOD| PostgreSQL"
msgstr ""

#: ../../postgres/index.rst:5
# 815076cbcef240ca95009e855bc7e2ae
msgid "PostgreSQL is a Database Management System (DBMS). In this module, you'll be shown how to use PostgreSQL to create a new database, as well as accessing other typical DBMS functions."
msgstr ""

#: ../../postgres/queries.rst:2
# 0d60ab3cabef43e78ccc0fcc537a1920
msgid "|LS| Queries"
msgstr ""

#: ../../postgres/queries.rst:4
# 6d4dedd347b940f8a03fe3fc83171f2f
msgid "When you write a :kbd:`SELECT ...` command it is commonly known as a query - you are interrogating the database for information."
msgstr ""

#: ../../postgres/queries.rst:7
# 016ec2d0d9ae4f0fae9ae5a23235fe13
msgid "**The goal of this lesson:** To learn how to create queries that will return useful information."
msgstr ""

#: ../../postgres/queries.rst:11
# abe81278da9b46c18e7c1ba5286482c9
msgid "Follow-up from previous lesson"
msgstr ""

#: ../../postgres/queries.rst:13
# f3cbc36d85174215968f1e7f98fcf1ef
msgid "Let's check that you added a few people to the database successfully:"
msgstr ""

#: ../../postgres/queries.rst:27
# 618e321b8a294530aca8499ffada7662
msgid "Ordering results"
msgstr ""

#: ../../postgres/queries.rst:29
# da54f7537b22464aaa80b5d8e9114dca
msgid "Let's get a list of people ordered by their house numbers:"
msgstr ""

#: ../../postgres/queries.rst:35
#: ../../postgres/queries.rst:53
#: ../../postgres/queries.rst:187
#: ../../postgres/queries.rst:212
#: ../../postgres/queries.rst:237
#: ../../postgres/queries.rst:254
#: ../../postgres/queries.rst:298
#: ../../postgres/views.rst:30
# be6a80b08e14414188cad1ecc8fd2eaa
# 06ec6e5a28d94407a52ca8f27a548089
# d2da7e8523ef46e8ae1c9dc0020b63d2
# 9e09aac7f16b4e70a52b59d8b088e1a0
# 6755a65586204ea9a537827a32c22294
# ef2b202144b04eb598845003a937ed42
# 431cdbbc8fe646edb4f6e211d68e5868
# 3e23bc38a967486494f34a8e20f5b9d2
msgid "Result:"
msgstr ""

#: ../../postgres/queries.rst:47
# a3ba37d9d80e41c4a78a8ed54379b971
msgid "You can sort by more than one column:"
msgstr ""

#: ../../postgres/queries.rst:66
# 3d10f0de9541417299cafc8a64232b33
msgid "Filtering"
msgstr ""

#: ../../postgres/queries.rst:68
# 16dfb9b1be1742e6b1d75b52679e7cec
msgid "Often you won't want to see every single record in the database - especially if there are thousands of records and you are only interested in seeing one or two. Never fear, you can filter the results!"
msgstr ""

#: ../../postgres/queries.rst:72
# 6c4fe202f0f04ba9a18ea1dedcd30ed9
msgid "Here is an example of a numerical filter:"
msgstr ""

#: ../../postgres/queries.rst:83
# a4d3348ea31243448474bb3d2b17ccff
msgid "You can combine filters (defined using the :kbd:`WHERE` clause) with sorting (defined using the :kbd:`ORDER BY`)"
msgstr ""

#: ../../postgres/queries.rst:96
# 021213fa6d494b73b44724d19986fb1b
msgid "You can also filter based on text data:"
msgstr ""

#: ../../postgres/queries.rst:107
# a8ae38e746fb43aabdf68d5634709945
msgid "Here we used the :kbd:`LIKE` clause to find all names with an :kbd:`i` in them. If you want to search for a string of letters regardless of case, you can do a case insensitive search using the :kbd:`ILIKE` clause:"
msgstr ""

#: ../../postgres/queries.rst:120
# 788c5f419408401a8beda186ea0780a2
msgid "That found everyone with a :kbd:`k` or :kbd:`K` in their name. Using the normal :kbd:`ILIKE` clause, you'd get:"
msgstr ""

#: ../../postgres/queries.rst:132
# a987e9cab3ec49848f239909d75bab37
msgid "Joins"
msgstr ""

#: ../../postgres/queries.rst:134
# 2aa8640c529045aea04d0100880f0ee7
msgid "What if you want to see the person's details and their street name (not its id)? In order to do that, you need to join the two tables together in a single query. Lets look at an example:"
msgstr ""

#: ../../postgres/queries.rst:144
# 5ad2e8b0b21c4d16ad5c1003062e974f
msgid "With joins, you will always state the two tables the information is coming from, in this case people and streets.  You also need to specify which two keys must match (foreign key & primary key). If you don't specify that, you will get a list of all possible combinations of people and streets, but no way to know who actually lives on which street!"
msgstr ""

#: ../../postgres/queries.rst:150
# 20c92ca8740d42f189d4b8223d2ac558
msgid "Here is what the correct output will look like:"
msgstr ""

#: ../../postgres/queries.rst:162
# 2787e41bba0c4737bb16151374695d3a
msgid "We will revisit joins as we create more complex queries later. Just remember they provide a simple way to combine the information from two or more tables."
msgstr ""

#: ../../postgres/queries.rst:166
# 216326fa8af14f8e9f1cf40016430756
msgid "Subselect"
msgstr ""

#: ../../postgres/queries.rst:168
# 8ccce0fa7aad4c939afbf116674d425a
msgid "First, let's do a little tweaking to our data:"
msgstr ""

#: ../../postgres/queries.rst:178
# 04e9d0d511a747d9b4b25fd501848fe1
msgid "Let's take a quick look at our data after those changes - we reuse our query from the previous section:"
msgstr ""

#: ../../postgres/queries.rst:199
# e6384b20cb724bbbb9ad72b270873ed4
msgid "Now let's show you a subselection on this data. We want to show only people who live in :kbd:`street_id` number :kbd:`1`."
msgstr ""

#: ../../postgres/queries.rst:222
# 8a58189b9f264479882cdb29f086fc37
msgid "This is a contrived example and in the above situations it may have been overkill. However when you have to filter based on a selection, subselects are really useful!"
msgstr ""

#: ../../postgres/queries.rst:227
# 069e2ce4f9524a2993014b1b9f6c0fb3
msgid "Aggregate Queries"
msgstr ""

#: ../../postgres/queries.rst:229
# dd56a778c24a42139e9839bbc207459e
msgid "One of the powerful features of a database is its ability to summarise the data in its tables. These summaries are called aggregate queries. Here is a typical example:"
msgstr ""

#: ../../postgres/queries.rst:246
# 91b1eeacd1ca442abe318e2b8ce0e713
msgid "If we want the counts summarised by street name we can do this:"
msgstr ""

#: ../../postgres/queries.rst:265
# 7bc924d0b468439eb4f64376a77180bc
msgid "Because there is no :kbd:`ORDER BY` clause, on your computer these data may not be in the same order as shown here."
msgstr ""

#: ../../postgres/queries.rst:268
# 6dacc9415e054cac88ff54e48cba0024
msgid "Exercise:"
msgstr ""

#: ../../postgres/queries.rst:270
# bd0b9fdb22f24b88981820a1d567be30
msgid "Summarise the people by street name and show the actual street names instead of the street_id's"
msgstr ""

#: ../../postgres/queries.rst:309
# 0d1849ac7e7543848baeaea0c1ec6241
msgid "You will notice that we have prefixed field names with table names (e.g. people.name and streets.name). This needs to be done whenever the field name is ambiguous."
msgstr ""

#: ../../postgres/queries.rst:316
# 579a4ff42ae344ba959fc10df9a3f83c
msgid "You've seen how to use queries to return the data in your database in a way that allows you to extract useful information from it."
msgstr ""

#: ../../postgres/queries.rst:322
# d6353583ab914cbcbf5382b881044866
msgid "Next you'll see how to create views from the queries that you've written."
msgstr ""

#: ../../postgres/rules.rst:2
# ad858dbfb29c4004a25363989016935d
msgid "|LS| Rules"
msgstr ""

#: ../../postgres/rules.rst:4
# 1c356a4e8f1b426b87f010b19afb5f9b
msgid "Rules allow the \"query tree\" of an incoming query to be rewritten. One common usage is to implement views, including updatable view. *- Wikipedia*"
msgstr ""

#: ../../postgres/rules.rst:7
# e9bae3bae3be491790763120c8711531
msgid "**The goal for this lesson:** To learn how to create new rules for the database."
msgstr ""

#: ../../postgres/rules.rst:11
# fac5497d72394135bcb991fd956d7590
msgid "Materialised Views (Rule based views)"
msgstr ""

#: ../../postgres/rules.rst:13
# ad25569cc6ff4ad5abdb3752a0d17106
msgid "Say you want to log every change of phone_no in your people table in to a people_log table. So you set up a new table"
msgstr ""

#: ../../postgres/rules.rst:20
# 63a6a367c21a43b1afa3b7cf5dfc0e22
msgid "In the next step create a rule, that logs every change of a phone_no in the people table into the people_log table:"
msgstr ""

#: ../../postgres/rules.rst:29
# b2d29cde6003447ca5972a7f5ef2f174
msgid "To test that the rule works, let's modify a phone number:"
msgstr ""

#: ../../postgres/rules.rst:35
# f302190bd612428ab73f3814b4739627
msgid "Check that the table was updated correctly:"
msgstr ""

#: ../../postgres/rules.rst:44
# f170dc2e454645c08450f722ff11fe53
msgid "Now, thanks to the rule we created, the :kbd:`people_log` table will look like this:"
msgstr ""

#: ../../postgres/rules.rst:54
# c09631d5898a403284fd6595c0935550
msgid "The value of the :kbd:`time` field will depend on the current date and time."
msgstr ""

#: ../../postgres/rules.rst:60
# 950654446d424638916db9e6a954b8ad
msgid "Rules allow you to automatically add or change data in your database to reflect changes in other parts of the database."
msgstr ""

#: ../../postgres/rules.rst:66
# 685ab9b9b7a6437385a22b1971b09381
msgid "The next module will introduce you to PostGIS, which takes these database concepts and applies them to GIS data."
msgstr ""

#: ../../postgres/views.rst:2
# ad75a44bb62443b699ea80590a1c07c9
msgid "|LS| Views"
msgstr ""

#: ../../postgres/views.rst:4
# ca8406fa6f544f3c9c840d65c026128d
msgid "When you write a query, you need to spend a lot of time and effort formulating it. With views, you can save the definition of a sql query in a reusable 'virtual table'."
msgstr ""

#: ../../postgres/views.rst:8
# ced7539efdbe41e697feddcc3ba625b3
msgid "**The goal for this lesson:** To save a query as a view."
msgstr ""

#: ../../postgres/views.rst:11
# ac4df46976c34a3da3cf4c6a6b0d63b4
msgid "Creating a View"
msgstr ""

#: ../../postgres/views.rst:13
# b539104065314388b482485655c174bc
msgid "You can treat a view just like a table, but its data is sourced from a query. Let's make a simple view based on the above."
msgstr ""

#: ../../postgres/views.rst:23
# ff727670343e485a8c22c20a2a4f1592
msgid "As you can see the only change is the :kbd:`create view roads_count_v as` part at the beginning. The nice thing is that we can now select data from that view:"
msgstr ""

#: ../../postgres/views.rst:42
# 1366a4aadc7444ddb5a750be2f4fed3a
msgid "Modifying a View"
msgstr ""

#: ../../postgres/views.rst:44
# f03b4c3dfb39485cb57806f27097558a
msgid "A view is not fixed, and it contains no 'real data'. This means you can easily change it without impacting on any data in your database."
msgstr ""

#: ../../postgres/views.rst:55
# f8ee7be65ca04f9ea2263cb7abe86036
msgid "(This example also shows the best practice convention of using UPPER CASE for all SQL keywords.)"
msgstr ""

#: ../../postgres/views.rst:58
# 4f99c96be40f4953a97f4b61dc6609a0
msgid "You will see that we have added an :kbd:`ORDER BY` clause so that our view rows are nicely sorted:"
msgstr ""

#: ../../postgres/views.rst:71
# 7f2175e09566417db90904442fd6bfca
msgid "Dropping a View"
msgstr ""

#: ../../postgres/views.rst:73
# 9cf2aab872e4447689b03923634bac09
msgid "If you no longer need a view, you can delete it like this:"
msgstr ""

#: ../../postgres/views.rst:82
# 2b2c68f97504464ba0504e5fa5969847
msgid "Using views, you can save a query and access its results as if it were a table."
msgstr ""

#: ../../postgres/views.rst:87
# de296f4cae1d4568b2e666fd6844b213
msgid "Sometimes, when changing data, you want your changes to have effects elsewhere in the database. The next lesson will show you how to do this."
msgstr ""

